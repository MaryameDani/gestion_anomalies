# Generated by Django 5.1.4 on 2025-04-23 11:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reference", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("gravite", models.CharField(max_length=50)),
                ("statut", models.CharField(max_length=50)),
                ("heure_creation", models.DateTimeField(auto_now_add=True)),
                ("heure_modification", models.DateTimeField(auto_now=True)),
                ("heure_cloture", models.DateTimeField(blank=True, null=True)),
                ("date_creation", models.DateField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name="TypeAnomalie",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nom", models.CharField(max_length=100)),
                ("identifiant", models.IntegerField()),
                ("description", models.TextField()),
                ("gravite_par_defaut", models.CharField(max_length=50)),
                ("type_vehicule_concerne", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="Vehicule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("matricule", models.CharField(max_length=50)),
                ("type_vehicule", models.CharField(max_length=50)),
                ("marque", models.CharField(max_length=50)),
                ("modele", models.CharField(max_length=50)),
                ("date_mise_en_service", models.DateField()),
                ("tonnage_max", models.FloatField(blank=True, null=True)),
                ("en_service", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="GravitePrediction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gravite_predite", models.CharField(max_length=50)),
                (
                    "date_prediction",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="tickets.ticket"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Utilisateur",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=15, null=True)),
                ("birth_date", models.DateField(blank=True, null=True)),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("PERMANENCIER_CAMION", "Permanencier Camion"),
                            ("PERMANENCIER_MACHINE", "Permanencier Machine"),
                            (
                                "PERMANENCIER_MAINTENANCE_DRAGLINE",
                                "Permanencier Maintenancier Dragline",
                            ),
                            (
                                "PERMANENCIER_MAINTENANCE_ENGINS",
                                "Permanencier Maintenancier Engins",
                            ),
                            ("MAINTENANCIER", "Maintenancier"),
                            ("ADMINISTRATEUR", "Administrateur"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="utilisateur_set",
                        related_query_name="utilisateur",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="utilisateur_set",
                        related_query_name="utilisateur",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name="ticket",
            name="utilisateur_assigne",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tickets_assignes",
                to="tickets.utilisateur",
            ),
        ),
        migrations.AddField(
            model_name="ticket",
            name="utilisateur_createur",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tickets_crees",
                to="tickets.utilisateur",
            ),
        ),
        migrations.CreateModel(
            name="TonnagePrediction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_prediction",
                    models.DateField(default=django.utils.timezone.now),
                ),
                ("tonnage_prevu", models.FloatField()),
                (
                    "vehicule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="tickets.vehicule",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="ticket",
            name="vehicule",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="tickets.vehicule",
            ),
        ),
        migrations.CreateModel(
            name="Conducteur",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("phone", models.CharField(max_length=15)),
                ("date_poste", models.DateField()),
                ("heure_debut", models.DateTimeField()),
                ("heure_fin", models.DateTimeField()),
                ("commentaire", models.TextField()),
                (
                    "utilisateur",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tickets.utilisateur",
                    ),
                ),
                (
                    "vehicule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="tickets.vehicule",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ArretVehicule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type_arret", models.CharField(max_length=100)),
                ("heure_debut", models.DateTimeField()),
                ("heure_fin", models.DateTimeField(blank=True, null=True)),
                ("description", models.TextField()),
                (
                    "date_determination",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="arrets",
                        to="tickets.ticket",
                    ),
                ),
                (
                    "vehicule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="tickets.vehicule",
                    ),
                ),
            ],
        ),
    ]
